/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: MIT-0
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the "Software"), to deal in the Software
 * without restriction, including without limitation the rights to use, copy, modify,
 * merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
package software.amazon.qldb.tutorial.qldb

import com.amazon.ion.system.IonReaderBuilder
import com.amazon.ion.system.IonTextWriterBuilder
import com.amazonaws.services.qldb.model.GetBlockResult
import com.amazonaws.services.qldb.model.GetDigestResult
import com.amazonaws.services.qldb.model.ValueHolder
import java.io.IOException

/**
 * Helper methods to pretty-print certain QLDB response types.
 */
object QldbStringUtils {
    /**
     * Returns the string representation of a given [ValueHolder].
     * Adapted from the AWS SDK autogenerated `toString()` method, with sensitive values un-redacted.
     * Additionally, this method pretty-prints any IonText included in the [ValueHolder].
     *
     * @param valueHolder the [ValueHolder] to convert to a String.
     * @return the String representation of the supplied [ValueHolder].
     */
    @JvmStatic
    fun toUnredactedString(valueHolder: ValueHolder): String {
        val sb = StringBuilder()
        sb.append("{")
        if (valueHolder.ionText != null) {
            sb.append("IonText: ")
            val prettyWriter = IonTextWriterBuilder.pretty().build(sb)
            try {
                prettyWriter.writeValues(IonReaderBuilder.standard().build(valueHolder.ionText))
            } catch (ioe: IOException) {
                sb.append("**Exception while printing this IonText**")
            }
        }
        sb.append("}")
        return sb.toString()
    }

    /**
     * Returns the string representation of a given [GetBlockResult].
     * Adapted from the AWS SDK autogenerated `toString()` method, with sensitive values un-redacted.
     *
     * @param getBlockResult the [GetBlockResult] to convert to a String.
     * @return the String representation of the supplied [GetBlockResult].
     */
    @JvmStatic
    fun toUnredactedString(getBlockResult: GetBlockResult): String {
        val sb = StringBuilder()
        sb.append("{")
        if (getBlockResult.block != null) {
            sb.append("Block: ").append(toUnredactedString(getBlockResult.block)).append(",")
        }
        if (getBlockResult.proof != null) {
            sb.append("Proof: ").append(toUnredactedString(getBlockResult.proof))
        }
        sb.append("}")
        return sb.toString()
    }

    /**
     * Returns the string representation of a given [GetDigestResult].
     * Adapted from the AWS SDK autogenerated `toString()` method, with sensitive values un-redacted.
     *
     * @param getDigestResult the [GetDigestResult] to convert to a String.
     * @return the String representation of the supplied [GetDigestResult].
     */
    @JvmStatic
    fun toUnredactedString(getDigestResult: GetDigestResult): String {
        val sb = StringBuilder()
        sb.append("{")
        if (getDigestResult.digest != null) {
            sb.append("Digest: ").append(getDigestResult.digest).append(",")
        }
        if (getDigestResult.digestTipAddress != null) {
            sb.append("DigestTipAddress: ").append(toUnredactedString(getDigestResult.digestTipAddress))
        }
        sb.append("}")
        return sb.toString()
    }
}